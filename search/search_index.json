{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pyopenstates \u00b6 A Python client for the Open States API v3 . Source: https://github.com/openstates/pyopenstates/ Issues: https://github.com/openstates/pyopenstates/issues Note: This library was recently updated to support Open States API v3, documentation & coverage is a bit behind, but we wanted to get a release out. Feel free to contribute issues and/or fixes. Also, documentation is currently a bit out of date as of the 2.0 transition, but will be updated soon. Features \u00b6 Compatible with Python 3.7+ Automatic conversion of string dates and timestamps to datetime objects. Tested releases. Set API Key via environment variable or in code. API Keys \u00b6 To use the Open States API you must obtain an API Key . Once you have your key you can use it with this library by setting the OPENSTATES_API_KEY environment variable or calling pyopenstates.set_api_key . About Open States \u00b6 Open States strives to improve civic engagement at the state level by providing data and tools regarding state legislatures. We aim to serve members of the public, activist groups, journalists, and researchers with better data on what is happening in their state capital, and to provide tools to reduce barriers to participation and increase engagement. Open States aggregates legislative information from all 50 states, Washington, D.C., and Puerto Rico. This information is then standardized, cleaned, and published to the public via OpenStates.org, a powerful API, and bulk downloads. OpenStates.org enables individuals to find out who represents them, look up information on an important bill that\u2019s been in the news, discover how their representatives are voting, or just stay current with what is happening in their state. Additionally, our API and bulk downloads see millions of hits every month from advocacy organizations, journalists, researchers, and many others. Legislative data is collected from official sources, linked at the bottom of relevant pages. In general bill & vote data is collected multiple times a day via our scrapers while legislator data is curated by our team & volunteers like you.","title":"pyopenstates"},{"location":"#pyopenstates","text":"A Python client for the Open States API v3 . Source: https://github.com/openstates/pyopenstates/ Issues: https://github.com/openstates/pyopenstates/issues Note: This library was recently updated to support Open States API v3, documentation & coverage is a bit behind, but we wanted to get a release out. Feel free to contribute issues and/or fixes. Also, documentation is currently a bit out of date as of the 2.0 transition, but will be updated soon.","title":"pyopenstates"},{"location":"#features","text":"Compatible with Python 3.7+ Automatic conversion of string dates and timestamps to datetime objects. Tested releases. Set API Key via environment variable or in code.","title":"Features"},{"location":"#api-keys","text":"To use the Open States API you must obtain an API Key . Once you have your key you can use it with this library by setting the OPENSTATES_API_KEY environment variable or calling pyopenstates.set_api_key .","title":"API Keys"},{"location":"#about-open-states","text":"Open States strives to improve civic engagement at the state level by providing data and tools regarding state legislatures. We aim to serve members of the public, activist groups, journalists, and researchers with better data on what is happening in their state capital, and to provide tools to reduce barriers to participation and increase engagement. Open States aggregates legislative information from all 50 states, Washington, D.C., and Puerto Rico. This information is then standardized, cleaned, and published to the public via OpenStates.org, a powerful API, and bulk downloads. OpenStates.org enables individuals to find out who represents them, look up information on an important bill that\u2019s been in the news, discover how their representatives are voting, or just stay current with what is happening in their state. Additionally, our API and bulk downloads see millions of hits every month from advocacy organizations, journalists, researchers, and many others. Legislative data is collected from official sources, linked at the bottom of relevant pages. In general bill & vote data is collected multiple times a day via our scrapers while legislator data is curated by our team & volunteers like you.","title":"About Open States"},{"location":"changelog/","text":"Changelog \u00b6 2.0.0 - 15 November 2021 \u00b6 updated library to support API v3 & modernize Python tooling 1.2.0 - 15 May 2018 \u00b6 last release targeting API v1 detailed changelog was not kept before this","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#200-15-november-2021","text":"updated library to support API v3 & modernize Python tooling","title":"2.0.0 - 15 November 2021"},{"location":"changelog/#120-15-may-2018","text":"last release targeting API v1 detailed changelog was not kept before this","title":"1.2.0 - 15 May 2018"},{"location":"reference/","text":"pyopenstates module \u00b6 A Python client for the Open States API APIError ( RuntimeError ) \u00b6 Raised when the Open States API returns an error NotFound ( APIError ) \u00b6 Raised when the API cannot find the requested object get_bill ( uid = None , state = None , session = None , bill_id = None , ** kwargs ) \u00b6 Returns details of a specific bill Can be identified my the Open States unique bill id (uid), or by specifying the state, session, and legislative bill ID Args: uid: The Open States unique bill ID state: The postal code of the state session: The legislative session (see state metadata) bill_id: Yhe legislative bill ID (e.g. HR 42 ) **kwargs: Optional keyword argument options, such as fields , which specifies the fields to return Returns: The :ref: Bill details as a dictionary get_legislator ( leg_id ) \u00b6 Gets a legislator's details Args: leg_id: The Legislator's Open States ID fields: An optional custom list of fields to return Returns: The requested :ref: Legislator details as a dictionary get_metadata ( state = None , fields = None ) \u00b6 Returns a list of all states with data available, and basic metadata about their status. Can also get detailed metadata for a particular state. Args: state: The abbreviation of state to get detailed metadata on, or leave as None to get high-level metadata on all states. fields: An optional list of fields to return; returns all fields by default Returns: Dict: The requested :ref: Metadata as a dictionary locate_legislators ( lat , lng , fields = None ) \u00b6 Returns a list of legislators for the given latitude/longitude coordinates Args: lat: Latitude long: Longitude fields: An optional custom list of fields to return Returns: A list of matching :ref: Legislator dictionaries search_bills ( ** kwargs ) \u00b6 Find bills matching a given set of filters Args: **kwargs: One or more search filters state - Only return bills from a given state (e.g. nc ) chamber - Only return bills matching the provided chamber ( upper or lower ) bill_id - Only return bills with a given bill_id. bill_id_in - Accepts a pipe (|) delimited list of bill ids. q - Only return bills matching the provided full text query. search_window - By default all bills are searched, but if a time window is desired the following options can be passed to search_window : search_window=\"all\" - Default, include all sessions. search_window=\"session\" - Only bills from sessions within the current session. search_window=\"session\" - Only bills from the current session. search_window=\"session:2009\" - Only bills from the session named 2009 . search_window=\"term:2009-2011\" - Only bills from the sessions in the 2009-2011 session. updated_since - Only bills updated since a provided date (provided in YYYY-MM-DD format) sponsor_id Only bills sponsored by a given legislator id (e.g. ILL000555 ) subject - Only bills categorized by Open States as belonging to this subject. type Only bills of a given type (e.g. bill , resolution , etc.) You can specify sorting using the following sort keyword argument values: first last signed passed_lower passed_upper updated_at created_at Returns: A list of matching :ref: Bill dictionaries .. NOTE:: This method returns just a subset ( state , chamber , session , subjects , type , id , bill_id , title , created_at , updated_at ) of the bill fields by default. Use the ``fields`` parameter to specify a custom list of fields to return. search_districts ( state , chamber ) \u00b6 Search for districts Args: state: The state to search in chamber: the upper or lower legislative chamber fields: Optionally specify a custom list of fields to return Returns: A list of matching :ref: District dictionaries search_legislators ( jurisdiction = None , name = None , id_ = None , org_classification = None , district = None , include = None ) \u00b6 Search for legislators. Returns: A list of matching :ref: Legislator dictionaries set_api_key ( apikey ) \u00b6 Sets API key. Can also be set as OPENSTATES_API_KEY environment variable. set_user_agent ( user_agent ) \u00b6 Appends a custom string to the default User-Agent string (e.g. pyopenstates/__version__ user_agent )","title":"Reference"},{"location":"reference/#pyopenstates-module","text":"A Python client for the Open States API","title":"pyopenstates module"},{"location":"reference/#pyopenstates.APIError","text":"Raised when the Open States API returns an error","title":"APIError"},{"location":"reference/#pyopenstates.NotFound","text":"Raised when the API cannot find the requested object","title":"NotFound"},{"location":"reference/#pyopenstates.get_bill","text":"Returns details of a specific bill Can be identified my the Open States unique bill id (uid), or by specifying the state, session, and legislative bill ID Args: uid: The Open States unique bill ID state: The postal code of the state session: The legislative session (see state metadata) bill_id: Yhe legislative bill ID (e.g. HR 42 ) **kwargs: Optional keyword argument options, such as fields , which specifies the fields to return Returns: The :ref: Bill details as a dictionary","title":"get_bill()"},{"location":"reference/#pyopenstates.get_legislator","text":"Gets a legislator's details Args: leg_id: The Legislator's Open States ID fields: An optional custom list of fields to return Returns: The requested :ref: Legislator details as a dictionary","title":"get_legislator()"},{"location":"reference/#pyopenstates.get_metadata","text":"Returns a list of all states with data available, and basic metadata about their status. Can also get detailed metadata for a particular state. Args: state: The abbreviation of state to get detailed metadata on, or leave as None to get high-level metadata on all states. fields: An optional list of fields to return; returns all fields by default Returns: Dict: The requested :ref: Metadata as a dictionary","title":"get_metadata()"},{"location":"reference/#pyopenstates.locate_legislators","text":"Returns a list of legislators for the given latitude/longitude coordinates Args: lat: Latitude long: Longitude fields: An optional custom list of fields to return Returns: A list of matching :ref: Legislator dictionaries","title":"locate_legislators()"},{"location":"reference/#pyopenstates.search_bills","text":"Find bills matching a given set of filters Args: **kwargs: One or more search filters state - Only return bills from a given state (e.g. nc ) chamber - Only return bills matching the provided chamber ( upper or lower ) bill_id - Only return bills with a given bill_id. bill_id_in - Accepts a pipe (|) delimited list of bill ids. q - Only return bills matching the provided full text query. search_window - By default all bills are searched, but if a time window is desired the following options can be passed to search_window : search_window=\"all\" - Default, include all sessions. search_window=\"session\" - Only bills from sessions within the current session. search_window=\"session\" - Only bills from the current session. search_window=\"session:2009\" - Only bills from the session named 2009 . search_window=\"term:2009-2011\" - Only bills from the sessions in the 2009-2011 session. updated_since - Only bills updated since a provided date (provided in YYYY-MM-DD format) sponsor_id Only bills sponsored by a given legislator id (e.g. ILL000555 ) subject - Only bills categorized by Open States as belonging to this subject. type Only bills of a given type (e.g. bill , resolution , etc.) You can specify sorting using the following sort keyword argument values: first last signed passed_lower passed_upper updated_at created_at Returns: A list of matching :ref: Bill dictionaries .. NOTE:: This method returns just a subset ( state , chamber , session , subjects , type , id , bill_id , title , created_at , updated_at ) of the bill fields by default. Use the ``fields`` parameter to specify a custom list of fields to return.","title":"search_bills()"},{"location":"reference/#pyopenstates.search_districts","text":"Search for districts Args: state: The state to search in chamber: the upper or lower legislative chamber fields: Optionally specify a custom list of fields to return Returns: A list of matching :ref: District dictionaries","title":"search_districts()"},{"location":"reference/#pyopenstates.search_legislators","text":"Search for legislators. Returns: A list of matching :ref: Legislator dictionaries","title":"search_legislators()"},{"location":"reference/#pyopenstates.set_api_key","text":"Sets API key. Can also be set as OPENSTATES_API_KEY environment variable.","title":"set_api_key()"},{"location":"reference/#pyopenstates.set_user_agent","text":"Appends a custom string to the default User-Agent string (e.g. pyopenstates/__version__ user_agent )","title":"set_user_agent()"}]}